
=pod

=head1 NAME

rel - An ANSI C class to manage small datastores

=head1 SYNOPSIS

 #include "xas/rms/rel.h"

 int _stuff_init(rel_t *self) {
 
 }
 
 rel_t *stuff_create(char *path, char *name, int records, int recsize, int retries, int timeout) {
 
     int stat = OK;
     rel_t *self = NULL;
     item_list_t items[2];

     when_error_in {

         self = rel_create(path, name, records, recsize, retries, timeout);
         check_creation(self);

         SET_ITEM(items[0], REL_M_INIT, _stuff_init, 0, NULL);
         SET_ITEM(items[1], 0, 0, 0, 0);

         stat = rel_override(self, items);
         check_return(stat, self);

         exit_when;

     } use {

         process_error(self);

     } end_when;

     return self;

 }

=head1 DESCRIPTION

This class overlays a structured format on a file, thus creating a
datastore. These files are a fixed size. They can be easily extended, but 
contraction would require a custom utility.

All access to the data is on a record basis. The current record number 
can be retrieved. There is built in search and find functionality. Get,
put, add and del access methods are provided. Record access is protected 
with file locking. So multi-user access is safe. All access is linear. 

The datastore consists of this file: <path>/<name>.dat

A relative file is good for accessing small datastores. Such as a few
thousand records. Anything bigger you may want to consider an ISAM or
SQL solution.

This library is a class. It is extensible and overridable. It inherits
from the L<fib(3)> and L<blk(3)> classes. It uses structured error
handling for managing errors.

The files rel.c and rel.h define the class. 

=over 4

=item B<rel.h>

This defines the interface to the class. 

=item B<rel.c> 

This implements the interface.

=back

=head1 METHODS

=head2 rel_t *rel_create(char *path, char *name, int records, int recsize, int retries, int timeout)

This method initializes the class. 

=over 4

=item B<path>

The path to the file.

=item B<name>

The name of the file. This has ".dat" appended.

=item B<records>

The inital number of records in the file.

=item B<recsize>

The size of the record in bytes.

=item B<retries>

The number of retries to perform if the file is locked.

=item B<timeout>

The number of seconds to wait between retries.

=back

=head2 int rel_destroy(rel_t *self)

This destroys the object. 

=over 4

=item B<self>

A pointer to the rel_t object.

=back

=head2 int rel_override(rel_t *self, item_list_t *items)

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the rel_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 int rel_compare(rel_t *this, rel_t *that)

This method allows you to compare one rel_t object to another. 

=over 4

=item B<this>

A pointer to a rel_t object.

=item B<that>

A pointer to a rel_t object.

=back

=head2 char *rel_version(rel_t *self)

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the rel_t object.

=back

=head2 int rel_open(rel_t *self, int flags, mode_t mode)

This method allows access to the datastore. If the datastore does not
exists, it will be created, extended to the correct size and be
initialized. 

=over 4

=item B<self>

A pointer for a blk_t object.

=item B<flags>

The flags to pass to open().

=item B<mode>

The mode to pass to open().

=back

=head2 int rel_close(rel_t *self)

This method closes access to the datastore.

=over 4

=item B<self>

A pointer to a rel_t object.

=back

=head2 int rel_remove(rel_t *self)

This method removes the datastore.

=over 4

=item B<self>

A pointer to a rel_t object.

=back

=head2 int rel_record(rel_t *self, off_t *recnum)

This method retrieves the current record number.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<recnum>

A pointer to a where to write the current record number.

=back

=head2 int rel_add(rel_t *self, void *record)

This method adds a record to the datastore. By default, this is the
first deleted record that is found. If this is not the correct
behavior, this needs to be overridden.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<record>

A pointer to a record to write to the datastore.

=back

=head2 int rel_del(rel_t *self, int recnum)

This method deletes the record from the datastore. By default this
marks the record as "deleted" and zeros it out. If this is not the
correct behavior, this needs to be overridden.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<recnum>

The record number of the record to delete from the datastore.

=back

=head2 int rel_get(rel_t *self, int recnum, void *record)

This method gets the record at recnum. By default this just returns
the data from the disk file. This behavior can be overridden.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<recnum>

The record number to get.

=item B<record>

A pointer to a record to write the data too. This storage needs to be
allocated before usage.

=back

=head2 int rel_put(rel_t *self, int recnum, void *record)

This method updates a record. By default this just writes the record to
the file. This behavior can be modified.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<recnum>

The record to update.

=item B<record>

A pointer to the updated record.

=back

=head2 int rel_extend(rel_t *self, int records)

This method extends the file. By default this creates the new records
as "deleted" and zeros it out. This behavior can be overridden.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<records>

The number of records to extend the file by.

=back

=head2 int rel_remove(rel_t *self)

This method removes the file.

=over 4

=item B<self>

A pointer to a rel_t object.

=back

=head2 int rel_find(rel_t *self, void *data, int (*compare)(void *, void *), off_t *recnum)

This method will return the record number of the first record that matches 
the comparison.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<data>

A pointer to the data to use for comparison.

=item B<compare>

A comparison function used to match the data to a record.
This should return TRUE on match, otherwise FALSE.

=item B<recnum>

A pointer to write the record number of the record that matches. A 0 is 
returned if nothing matches.

=back

=head2 int rel_search(rel_t *self, void *data, int(*compare)(void *, void *), int (*capture)(rel_t *, void *, queue_t *), queue_t *results)

This method will call the capture callback for each record that matches the 
compare callback. 

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<data>

A pointer to the data to use for the comparison.

=item B<compare>

A comparison function used to match the data to a record. This should 
return TRUE on match, otherwise FALSE.

=item B<capture>

A capture function to collect the matching records. This uses the
queue_t data structure. This structure is managed by the L<que(3)> function
library. This data structure must be initialized before usage.

=item B<results>

A queue_t data structure with the results, an empty list shows that
nothing was found for the comparison.

=back

=head2 int rel_get_records(rel_t *self, off_t *records)

This method returns the number of records in the file.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<records>

The pointer to write the number of records into.

=back

=head2 int rel_get_recsize(rel_t *self, off_t *recsize)

This method returns the size of the record.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<recsize>

The pointer to write the record size into.

=back

=head2 int rel_set_trace(rel_t *self, void (*trace)(error_trace_t *))

This method sets the callback to capture any internal errors to an
external source.

=over 4

=item B<self>

A pointer to a rel_t object.

=item B<trace>

A pointer to the callback.

=back

=head1 OVERRIDES

This class by default will maintain a small datastore perfectly, but
there may be behaviors that you want to change. The override provision
provided with the class allows you to do so. To do this you would
inherit from the base class such as the example above. The following 
class methods may be overridden:

=over 4

=item B<int _add(rel_t *, void *)>

This method is called by rel_add() to add a record to the datastore. By default
this will use the first "deleted" record found, to store this record. You may 
wish to do something different. You use REL_M_ADD when defining your overrides.

=item B<int _build(rel_t *, void *, void *)>

This method is called by rel_get() to transfer the on disk record to a in
memory record. This allows you to modify the record. You use REL_M_BUILD when 
defining your overrides.

=item B<int _del(rel_t *, off_t, void *)>

This method is called by rel_del() to delete a record from the datastore. By 
default this marks the record as "deleted" and zeros it out. What "delete" 
means, can change between different implementations. You use REL_M_DEL when
defining your overrides.

=item B<int _extend(rel_t *, int)>

This method is called by rel_extend() and rel_open() to extend the size of 
the datastore. This allows for customization of the records before they are 
written out. You use REL_M_EXTEND when defining your overrides.

=item B<int _init(rel_t *)>

This method is called by rel_open() and allows for initializing the datastore 
after it has been created. You use REL_M_INIT when defining your overrides.

=item B<int _normalize(rel_t *, void *, void *)>

This method is called by get_put() when a record is updated. By
default this just writes the record to disk. But in a multi-user environment, 
the on disk record may change between reading and updating. This
allows you to "normalize" the differing versions of the record. How
you determine these differences is up to you. You use REL_M_NORMALIZE when
defining your overrides.

=back

=head1 RETURNS

The method rel_create() returns a pointer to a rel_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=item L<fib(3)>

=item L<blk(3)>

=item L<que(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2024 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

