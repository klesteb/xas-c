
=pod

=head1 NAME

logger - A ANSI C class

=head1 SYNOPSIS

 #include <stdio.h>
 #include "xas/logger.h"

 int main(int argc, char **argv) {

     logger_t *temp = NULL;
     char *process = argv[0];
     char *category = "test";
     char *facility = "system";

     if ((temp = log_create(facility, category, process))) {

         log_destroy(temp);

     }

     return 0;

 }

=head1 DESCRIPTION

This class is a thin wrapper around the log4c logging routines. This is an 
attempt to make them more user friendly.

The files logger.c and logger.h define the class. 

=over 4

=item B<logger.h>

This defines the interface to the class. 

=item B<logger.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<logger_t *log_create(char *facility, char *category, char *process)>

This method initializes the class. 

=over 4

=item B<facility>

The logging facility.

=item B<category>

The logging category.

=item B<process>

The process name.

=back

=head2 I<int log_destroy(logger_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the logger_t object.

=back

=head2 I<int log_override(logger_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int log_compare(logger_t *this, logger_t *that)>

This method allows you to compare one logger_t object to another. 

=over 4

=item B<this>

A pointer to a logger_t object.

=item B<that>

A pointer to a logger_t object.

=back

=head2 I<char *log_version(logger_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the logger_t object.

=back

=head2 I<int log_set_category(logger_t *self, char *category)>

The method allows you to set the category of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<category>

The category to set.

=back

=head2 I<int log_get_category(logger_t *self, char *category, int size)>

The method allows you to get the category of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<category>

The buffer to write the category into.

=item B<size>

The size of the buffer.

=back

=head2 I<int log_set_facility(logger_t *self, char *facility)>

The method allows you to set the facility of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<facility>

The facility to set.

=back

=head2 I<int log_get_facility(logger_t *self, char *facility, int size)>

The method allows you to get the current facility of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<facility>

The buffer to write the facility into.

=item B<size>

The size of the buffer.

=back

=head2 I<int log_set_process(logger_t *self, char *process)>

The method allows you to set the process of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<process>

The process to set.

=back

=head2 I<int log_get_process(logger_t *self, char *process, int size)>

This method allows you to get the current process of the logger.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<process>

The buffer to write the process into.

=item B<size>

The size of the buffer.

=back

=head2 I<int log_dispatch(logger_t *self, int type, int lineno, char *filename, const char *function, char *fmt, ...)>

This method write a line of output to the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<type>

The type of log entry. The currently supported types are: INFO, WARN,
ERROR, FATAL, DEBUG, TRACE

These mnemonics are defined in logger.h

=item B<lineno>

The current line in the source file.

=item B<filename>

The file name of the source file.

=item B<function>

The current function name.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head1 MACROS

The following macros have been defined to make logging easier. They
use the mnemonics from logger.h and preprocessor definitions to fill in the
necessary values needed by log_dispatch().

=head2 I<log_info(self, format, ...)>

This macro creates a INFO line in the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head2 I<log_warn(self, format, ...)>

This macro creates a WARN line in the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head2 I<log_error(self, format, ...)>

This macro creates an ERROR line in the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head2 I<log_fatal(self, format, ...)>

This macro creates a FATAL line in the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head2 I<log_trace(self, format, ...)>

This macro creates a TRACE line in the current log.

=over 4

=item B<self>

A pointer to the logger_t object.

=item B<format>

A sprintf style of format line. 

=item B<...>

The items used in the format line.

=back

=head1 LOG4C Extensions

They are a set of extension included with this class that defines an
extra set of layouts. They are the following:

=over 4

=item B<logstash>

This creates a log line in JSON format that is suitable for inclusion
into a logging aggregate such as Elastic Search. This uses the familiar
logstash format.

=item B<console>

This creates a simple log line that is suitable for display on a
console.

=item B<batch>

This creates a simple log line that includes a date/time stamp.
Suitable for simple log files.

=back

=head1 RETURNS

The method log_create() returns a pointer to a logger_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2019 - 2024 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

