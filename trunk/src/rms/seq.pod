
=pod

=head1 NAME

seq - A class for manipulating files

=head1 SYNOPSIS

 #include <stdio.h>
 #include "xas/rms/seq.h"

 int main(int argc, char **argv) {

     seq_t *temp = NULL;
     char *filename = "files.pod";
     
     if ((temp = seq_create(filename))) {

         seq_open(temp, O_RDONLY, 0);
         seq_close(temp);

         seq_destroy(temp);

     }

     return 0;

 }

=head1 DESCRIPTION

This is a class to perform file I/O. It reads a file a line at a time.
Where the line uses a termination sequence such as a line feed(LF). It uses 
standard Unix file I/O to perform its functions.

The files seq.c and seq.h define the class. 

=over 4

=item B<xas/rms/seq.h>

This defines the interface to the class. 

=item B<seq.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<seq_t *seq_create(char *filename, int retries, int timeout)>

This method initializes the class. 

=over 4

=item B<filename>

The name of the file to manipulate.

=back

=head2 I<int seq_destroy(seq_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to a seq_t object.

=back

=head2 I<int seq_override(seq_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<items>

An array of item_list_t types. The array is 0 terminated.

=back

=head2 I<int seq_compare(seq_t *this, seq_t *that)>

This method allows you to compare one seq_t object to another. 

=over 4

=item B<this>

A pointer to a seq_t object.

=item B<that>

A pointer to a seq_t object.

=back

=head2 I<char *seq_version(seq_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the seq_t object.

=back

=head2 I<int seq_open(seq_t *self, int flags, mode_t mode)>

This method allows you to open the file. This is a wrapper around
L<open(2)>.

=over 4

=item B<self>

A pointer for a seq_t object.

=item B<flags>

The flags to pass to open().

=item B<mode>

The mode to pass to open().

=back

=head2 I<int seq_close(seq_t *self)>

This method allows you to close the file. This is a wrapper around
L<close(2)>.

=over 4

=item B<self>

A pointer for a seq_t object.

=back

=head2 I<int seq_puts(seq_t *self, char *buffer, size_t size, ssize_t *count)>

This method allows you to write a string to the file. The string will have a
"\n" appended to the end. This is an emulation of L<puts(3)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<buffer>

A pointer to the buffer to write to the file.

=item B<size>

The size of the buffer.

=item B<count>

A pointer to the number of bytes written. A 0 indicates that nothing
was written.

=back

=head2 I<int seq_gets(seq_t *self, char *buffer, size_t size, ssize_t *count)>

This method allows you to read a string from a file. The read will be up to 
I<size> number of characters, EOF or when a '\n' has been reached. The string 
will have a '\0' appended to the end. This is an emulation of L<gets(3)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<buffer>

A pointer to the buffer read from the file.

=item B<size>

The size of the buffer.

=item B<count>

A pointer to the number of bytes read. 0 bytes would indicate end of
file. This may also indicate that your process dosen't have access to 
the file.

=back

=head2 I<int seq_exists(seq_t *self, int *exists)>

This method allows you to check and see if a files exists. This is a
wrapper around L<stat(2)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<exists>

A pointer to wither the file exists. This is a TRUE/FALSE value.

=back

=head2 I<int seq_stat(seq_t *self, struct stat *buffer)>

This method allows you to retrieve file information. This is a wrapper around 
L<stat(2)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<buffer>

A pointer to a I<struct stat> data structure.

=back

=head2 I<int seq_unlink(seq_t *self)>

This method allows you to unlink a file. This is a wrapper around 
L<unlink(2)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=back

=head2 I<int seq_size(seq_t *self, off_t *size)>

This method allows you to retrieve the file size. This is a wrapper around 
L<stat(2)>.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<size>

A pointer to where to write the file size.

=back

=head1 MUTATORS

=head2 I<int seq_get_fd(seq_t *self, int *fd)>

This method returns the file descriptor.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<fd>

A pointer to store the file descriptor into.

=back

=head2 I<int seq_get_eol(seq_t *self, char *eol)>

This method returns the current end of line.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<eol>

A pointer to store the end of line into.

=back

=head2 I<int seq_set_eol(seq_t *self, char *eol)>

This method sets the current end of line.

=over 4

=item B<self>

A pointer to a seq_t object.

=item B<eol>

A pointer to the new end of line.

=back

=head1 RETURNS

The method seq_create() returns a pointer to a seq_t object. All other 
methods return either OK on success or ERR on failure. The extended 
error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=item L<fib(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2023 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

