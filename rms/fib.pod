
=pod

=head1 NAME

fib - A class for manipulating files

=head1 SYNOPSIS

 #include <stdio.h>
 #include "xas/rms/fib.h"

 int main(int argc, char **argv) {

     fib_t *temp = NULL;
     int retries = 10;
     int timeout = 30;
     char *filename = "files.pod";
     
     if ((temp = fib_create(filename, retries, timeout))) {

         fib_open(temp, O_RDONLY, 0);
         fib_close(temp);

         fib_destroy(temp);

     }

     return 0;

 }

=head1 DESCRIPTION

This is a class to perform basic file I/O. It uses standard Unix file I/O 
to perform its functions.

The files fib.c and fib.h define the class. 

=over 4

=item B<xas/rms/fibs.h>

This defines the interface to the class. 

=item B<fib.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<fib_t *fib_create(char *filename, int retries, int timeout)>

This method initializes the class. 

=over 4

=item B<filename>

The name of the file to manipulate.

=item B<retries>

The number of retries to perform if the file is locked.

=item B<timeout>

The number of seconds to wait between retries.

=back

=head2 I<int fib_destroy(fib_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to a fib_t object.

=back

=head2 I<int fib_override(fib_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<items>

An array of item_list_t types. The array is 0 terminated.

=back

=head2 I<int fib_compare(fib_t *this, fib_t *that)>

This method allows you to compare one fib_t object to another. 

=over 4

=item B<this>

A pointer to a fib_t object.

=item B<that>

A pointer to a fib_t object.

=back

=head2 I<char *fib_version(fib_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the fib_t object.

=back

=head2 I<int fib_open(fib_t *self, int flags, mode_t mode)>

This method allows you to open the file. This is a wrapper around
L<open(2)>.

=over 4

=item B<self>

A pointer for a fib_t object.

=item B<flags>

The flags to pass to open().

=item B<mode>

The mode to pass to open().

=back

=head2 I<int fib_close(fib_t *self)>

This method allows you to close the file. This is a wrapper around
L<close(2)>.

=over 4

=item B<self>

A pointer for a fib_t object.

=back

=head2 I<int fib_read(fib_t *self, void *buffer, size_t size, ssize_t *count)>

This method allows you to read data from the file. This is a wrapper around 
L<read(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<buffer>

A pointer to the buffer to read the data into.

=item B<size>

The size of the buffer.

=item B<count>

A pointer to the number of bytes read. 0 bytes would indicate end of
file. This may also indicate that your process dosen't have access to 
the file.

=back

=head2 I<int fib_write(fib_t *self, void *buffer, size_t size, ssize_t *count)>

This method allows you to write data to the file. This is a wrapper around 
L<write(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<buffer>

A pointer to the buffer to write to the file.

=item B<size>

The size of the buffer.

=item B<count>

A pointer to the number of bytes written. A 0 indicates that nothing
was written.

=back

=head2 I<int fib_exists(fib_t *self, int *exists)>

This method allows you to check and see if a files exists. This is a
wrapper around L<stat(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<exists>

A pointer to wither the file exists. This is a TRUE/FALSE value.

=back

=head2 I<int fib_stat(fib_t *self, struct stat *buffer)>

This method allows you to retrieve file information. This is a wrapper around 
L<stat(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<buffer>

A pointer to a I<struct stat> data structure.

=back

=head2 I<int fib_unlink(fib_t *self)>

This method allows you to unlink a file. This is a wrapper around 
L<unlink(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=back

=head2 I<int fib_size(fib_t *self, off_t *size)>

This method allows you to retrieve the file size. This is a wrapper around 
L<stat(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<size>

A pointer to where to write the file size.

=back

=head2 I<int fib_lock(fib_t *self, off_t offset, off_t length)>

This method allows you to lock a range of bytes within the file. A
offset of 0 and a range of 0, locks the whole file. This is a wrapper 
around L<fcntl(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item offset

The position within the file to start locking.

=item length

The range of bytes to lock.

=back

=head2 I<int fib_unlock(fib_t *self)>

This method allows you to unlock a previous lock. This is a wrapper around 
L<fcntl(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=back

=head2 I<int fib_seek(fib_t *self, off_t offset, int whence)>

This method allows you to seek to a particular potion within the file. 
This is a wrapper around L<lseek(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<offset>

The offset within the file.

=item B<whence>

This should be one of SEEK_SET, SEEK_CUR, SEEK_END.

=back

=head2 I<int fib_tell(fib_t *self, off_t *offset)>

This method allows you to tell the current position within the file.  This 
is a wrapper around L<lseek(2)>.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<offset>

A pointer to the current position within the file.

=back

=head1 MUTATORS

=head2 I<int fib_get_fd(fib_t *self, int *fd)>

This method returns the file descriptor.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<fd>

A pointer to the store the file descriptor into.

=back

=head2 I<int fib_get_retries(fib_t *self, int *retries)>

This method returns the retires.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<retries>

A pointer to store the retiries into.

=back

=head2 I<int fib_set_retries(fib_t *self, int retries)>

This method sets the retires.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<retries>

The number of retires that can be preformed.

=back

=head2 I<int fib_get_timeout(fib_t *self, int *timeout)>

This method returns the retires.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<timeout>

A pointer to store the timeout into.

=back

=head2 I<int fib_set_timeout(fib_t *self, int timeout)>

This method sets the timeout.

=over 4

=item B<self>

A pointer to a fib_t object.

=item B<timeout>

The timeout.

=back

=head1 RETURNS

The method fib_create() returns a pointer to a fib_t object. All other 
methods return either OK on success or ERR on failure. The extended 
error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2023 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

